# 【タプルの基本】

fruit = ('apple', 'banana', 'lemon')  # タプルを定義します。タプルは一度定義すると要素の変更ができません。

print(fruit)  # タプルを出力します。('apple', 'banana', 'lemon')が出力されます。
print(type(fruit))  # タプルの型を出力します。<class 'tuple'>が出力されます。
print(fruit[0])  # タプルの最初の要素を出力します。'apple'が出力されます。
# fruit[1] = 'grape'  # タプルの要素を変更しようとするとエラーが発生します。タプルは一度定義すると要素の変更ができません。
fruit = fruit + ('grape',)  # タプルに新たな要素を追加します。タプルの要素を直接変更することはできませんが、新たなタプルを作成することは可能です。
print(fruit)  # 更新後のタプルを出力します。('apple', 'banana', 'lemon', 'grape')が出力されます。

# 【リストからタプルへの変換】

list_fruit = ['apple', 'banana']  # リストを定義します。
fruit = tuple(list_fruit)  # リストからタプルに変換します。
print(fruit)  # タプルを出力します。('apple', 'banana')が出力されます。
print(fruit.count('apple'))  # タプル内の'apple'の数を出力します。1が出力されます。
print(fruit.index('apple'))  # タプル内で'apple'が最初に出現する位置を出力します。0が出力されます。

# 【タプルをキーとした辞書】

pos = (135, 35)  # タプルを定義します。タプルは変更不可能なため、辞書のキーとして使用することができます。

countries = {pos: 'Japan'}  # タプルをキーとした辞書を定義します。

print(countries.get((135,35)))  # 辞書からキー(135,35)に対応する値を取得します。'Japan'が出力されます。

""" 
タプルとリストはPythonの基本的なデータ構造で、いくつかの重要な違いがあります。

1. 変更可能性: リストは変更可能（mutable）で、要素の追加、削除、変更が可能です。一方、タプルは変更不可能（immutable）で、一度定義されたらその要素を変更することはできません。

2. 速度: タプルの方がリストよりもアクセス速度が速いと一般的に言われています。これはタプルが変更不可能であるため、Pythonがメモリ上で効率的に配置できるからです。

3. 安全性: タプルの変更不可能性は、特定の値がプログラムの実行中に変更されないことを保証するために役立ちます。これは、特にマルチスレッド環境で重要です。

4. 辞書のキー: タプルはその変更不可能性から、辞書のキーとして使用することができます。一方、リストは変更可能なため、辞書のキーとして使用することはできません。

以上のような違いから、タプルとリストはそれぞれ異なる用途で使用されます。タプルは変更されるべきではないデータを保持するために、リストは変更可能であるべきデータを保持するために使用されます。
"""