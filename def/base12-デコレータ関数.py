# 【デコレータ関数の解説】

def my_decorator(func): # デコレータ関数を定義します。引数として関数を受け取ります。
    def wrapper(*args, **kwargs): # ラッパー関数を定義します。任意の数の引数を受け取ります。
        func(*args, **kwargs) # 受け取った関数を一度実行します。
        func(*args, **kwargs) # 受け取った関数をもう一度実行します。
    return wrapper # ラッパー関数を返します。

@my_decorator # デコレータを使用してfunc_a関数を修飾します。
def func_a(*args, **kwargs): # func_a関数を定義します。任意の数の引数を受け取ります。
    print('func_aを実行') # "func_aを実行"と出力します。
    print(args) # 引数を出力します。

@my_decorator # デコレータを使用してfunc_b関数を修飾します。
def func_b(*args, **kwargs): # func_b関数を定義します。任意の数の引数を受け取ります。
    print('func_bを実行') # "func_bを実行"と出力します。
    print(args) # 引数を出力します。

func_a(1, 2, 3) # func_a関数を実行します。引数は1, 2, 3です。結果は"func_aを実行"と"1, 2, 3"が2回ずつ出力されます。
func_b(2, 2, 3) # func_b関数を実行します。引数は2, 2, 3です。結果は"func_bを実行"と"2, 2, 3"が2回ずつ出力されます。

""" 
- *argsは、任意の数の位置引数をタプルとして受け取ります。
    例えば、func_a(1, 2, 3)という関数呼び出しでは、argsは(1, 2, 3)というタプルになります。

- **kwargsは、任意の数のキーワード引数を辞書として受け取ります。
    例えば、func_b(a=1, b=2)という関数呼び出しでは、kwargsは{'a': 1, 'b': 2}という辞書になります。

これらの構文は、関数が未知の数の引数で呼び出される可能性がある場合や、
関数内で他の関数を呼び出す際にその引数を転送する必要がある場合（例えばデコレータ内）などに便利です
"""